# Generated by Django 4.2.7 on 2025-10-24 06:41

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('description', models.TextField()),
                ('model_type', models.CharField(choices=[('text_classification', 'Text Classification'), ('text_generation', 'Text Generation'), ('image_classification', 'Image Classification'), ('object_detection', 'Object Detection'), ('sentiment_analysis', 'Sentiment Analysis'), ('named_entity_recognition', 'Named Entity Recognition'), ('machine_translation', 'Machine Translation'), ('question_answering', 'Question Answering'), ('summarization', 'Text Summarization'), ('custom', 'Custom Model')], max_length=50)),
                ('version', models.CharField(default='1.0', max_length=20)),
                ('framework', models.CharField(default='PyTorch', max_length=50)),
                ('model_file', models.FileField(blank=True, null=True, upload_to='ai_models/%Y/%m/')),
                ('config_file', models.FileField(blank=True, null=True, upload_to='ai_models/config/%Y/%m/')),
                ('accuracy', models.FloatField(blank=True, null=True)),
                ('precision', models.FloatField(blank=True, null=True)),
                ('recall', models.FloatField(blank=True, null=True)),
                ('f1_score', models.FloatField(blank=True, null=True)),
                ('input_format', models.JSONField(default=dict, help_text='Expected input format and parameters')),
                ('output_format', models.JSONField(default=dict, help_text='Output format specification')),
                ('max_input_length', models.PositiveIntegerField(default=512)),
                ('batch_size', models.PositiveIntegerField(default=1)),
                ('status', models.CharField(choices=[('training', 'Training'), ('ready', 'Ready'), ('deployed', 'Deployed'), ('maintenance', 'Maintenance'), ('archived', 'Archived')], default='training', max_length=20)),
                ('is_public', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_trained', models.DateTimeField(blank=True, null=True)),
                ('total_inferences', models.PositiveIntegerField(default=0)),
                ('successful_inferences', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIModelCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('color', models.CharField(default='#007bff', max_length=7)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'AI Model Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='InferenceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input_data', models.JSONField(help_text='Input data for the model')),
                ('parameters', models.JSONField(default=dict, help_text='Additional parameters for inference')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('result', models.JSONField(blank=True, help_text='Model output', null=True)),
                ('error_message', models.TextField(blank=True)),
                ('processing_time', models.FloatField(blank=True, help_text='Processing time in seconds', null=True)),
                ('memory_usage', models.FloatField(blank=True, help_text='Memory usage in MB', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inference_requests', to='ai_models.aimodel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inference_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ModelDeployment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deployment_type', models.CharField(choices=[('local', 'Local'), ('cloud', 'Cloud'), ('edge', 'Edge'), ('api', 'API Service')], max_length=20)),
                ('endpoint_url', models.URLField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('replicas', models.PositiveIntegerField(default=1)),
                ('cpu_limit', models.CharField(default='1000m', max_length=20)),
                ('memory_limit', models.CharField(default='1Gi', max_length=20)),
                ('health_check_url', models.URLField(blank=True)),
                ('last_health_check', models.DateTimeField(blank=True, null=True)),
                ('is_healthy', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deployments', to='ai_models.aimodel')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='aimodel',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='models', to='ai_models.aimodelcategory'),
        ),
        migrations.AddField(
            model_name='aimodel',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_ai_models', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='aimodel',
            name='team_members',
            field=models.ManyToManyField(blank=True, related_name='team_ai_models', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ModelUsageLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('api_endpoint', models.CharField(max_length=200)),
                ('response_time', models.FloatField(help_text='Total response time in seconds')),
                ('cpu_usage', models.FloatField(blank=True, null=True)),
                ('gpu_usage', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('inference_request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='usage_log', to='ai_models.inferencerequest')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_logs', to='ai_models.aimodel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='model_usage_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['-created_at'], name='ai_models_m_created_4f4d16_idx'), models.Index(fields=['model', 'user'], name='ai_models_m_model_i_072595_idx')],
            },
        ),
        migrations.CreateModel(
            name='ModelFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_type', models.CharField(choices=[('correct', 'Correct'), ('incorrect', 'Incorrect'), ('partially_correct', 'Partially Correct'), ('not_sure', 'Not Sure')], max_length=20)),
                ('comment', models.TextField(blank=True)),
                ('rating', models.PositiveIntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('inference_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='ai_models.inferencerequest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='model_feedback', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('inference_request', 'user')},
            },
        ),
        migrations.AddIndex(
            model_name='inferencerequest',
            index=models.Index(fields=['-created_at'], name='ai_models_i_created_9656ae_idx'),
        ),
        migrations.AddIndex(
            model_name='inferencerequest',
            index=models.Index(fields=['status'], name='ai_models_i_status_9e348b_idx'),
        ),
        migrations.AddIndex(
            model_name='inferencerequest',
            index=models.Index(fields=['model', 'user'], name='ai_models_i_model_i_c9e99b_idx'),
        ),
        migrations.AddIndex(
            model_name='aimodel',
            index=models.Index(fields=['-created_at'], name='ai_models_a_created_67817f_idx'),
        ),
        migrations.AddIndex(
            model_name='aimodel',
            index=models.Index(fields=['status'], name='ai_models_a_status_998ae1_idx'),
        ),
        migrations.AddIndex(
            model_name='aimodel',
            index=models.Index(fields=['model_type'], name='ai_models_a_model_t_850bfe_idx'),
        ),
        migrations.AddIndex(
            model_name='aimodel',
            index=models.Index(fields=['is_public'], name='ai_models_a_is_publ_39e45e_idx'),
        ),
    ]
